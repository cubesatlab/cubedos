--------------------------------------------------------------------------------
-- FILE   : cubedos-log_server-api.adb
-- SUBJECT: Body of a package that implements the CubedOS.Log_Server API
-- AUTHOR : (C) Copyright 2021 by Vermont Technical College
--
-- All the subprograms in this package are task safe.
--
-- THIS FILE WAS GENERATED BY Merc. DO NOT EDIT!!
--------------------------------------------------------------------------------
pragma SPARK_Mode(On);
pragma Warnings(Off);

with CubedOS.Lib.XDR;
with CubedOS.Lib;
use  CubedOS.Lib;
use  CubedOS.Lib.XDR;
with CubedOS.Message_Types.Mutable; use CubedOS.Message_Types.Mutable;

package body CubedOS.Log_Server.API is

   procedure Free is new Ada.Unchecked_Deallocation(String, String_Ptr);
   procedure Log_Text_Encode
      (Receiver_Address : in Message_Address;
      Sender_Address : in Message_Address;
      Request_ID : in Request_ID_Type;
      Level : in Log_Level_Type;
      Msg_Content : in Log_Message_Type;
      Priority : in System.Priority := System.Default_Priority;
      Result : out  Message_Record)
   is
      subtype Data_Index_Type is XDR_Index_Type range 0 .. 1023;
      Position   : Data_Index_Type;
      Last       : Data_Index_Type;
      subtype Definite_Data_Array is Data_Array(Data_Index_Type);
      Payload : Data_Array_Owner := new Definite_Data_Array'(others => 0);
      Message : Mutable_Message_Record;
   begin
      Position := 0;
      XDR.Encode(XDR.XDR_Unsigned(Log_Level_Type'Pos(Level)), Payload.all, Position, Last);
      Position := Last + 1;
      XDR.Encode(XDR.XDR_Unsigned(Msg_Content'Length), Payload.all, Position, Last);
      Position := Last + 1;
      XDR.Encode(String(Msg_Content), Payload.all, Position, Last);
      Position := Last + 1;
      Make_Empty_Message (
         Sender_Address   => Sender_Address,
         Receiver_Address => Receiver_Address,
         Request_ID   => Request_ID,
         Message_Type => Log_Text_Msg,
         Payload => Payload,
         Result => Message,
         Priority   => Priority);
      Result := Immutable(Message);
      Delete(Message);
      pragma Unused(Last, Payload, Position, Message);
   end Log_Text_Encode;
   
   procedure Send_Log_Text
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Level : in Log_Level_Type;
      Msg_Content : in Log_Message_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Log_Text_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Level => Level,
         Msg_Content => Msg_Content,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Status);
   end Send_Log_Text;
   
   procedure Send_Log_Text
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Level : in Log_Level_Type;
      Msg_Content : in Log_Message_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Log_Text_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Level => Level,
         Msg_Content => Msg_Content,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message);
   end Send_Log_Text;
   
   procedure Send_Log_Text
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Level : in Log_Level_Type;
      Msg_Content : in Log_Message_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Log_Text_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Domain_ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Level => Level,
         Msg_Content => Msg_Content,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, This_Domain, Status);
   end Send_Log_Text;
   
   procedure Send_Log_Text
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Level : in Log_Level_Type;
      Msg_Content : in Log_Message_Type;
      Receiving_Domain : Domain_Metadata := This_Domain;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
      Status : Status_Type := Unavailable;
   begin
      pragma Assert(Payload(Message) = null);
      Log_Text_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Receiving_Domain.ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Level => Level,
         Msg_Content => Msg_Content,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, Receiving_Domain, Status);
      pragma Unused(Status);
   end Send_Log_Text;
   
   procedure Log_Text_Decode
      (Message : in Message_Record;
      Level : out Log_Level_Type;
      Msg_Content : out Log_Message_Type_Ptr;
      Decode_Status : out Message_Status_Type)
   is
      Position : Data_Index_Type;
      Raw_Level : XDR.XDR_Unsigned;
      Raw_Msg_Content_Size : XDR.XDR_Unsigned;
      Last : Data_Index_Type;
   begin
      Decode_Status := Success;
      Level := Log_Level_Type'First;
      declare
         subtype Definite_String is Log_Message_Type(1..0);
      begin
         Msg_Content := new Definite_String'(others => ' ');
      end;
      Position := 0;
      
      -- Begin Decoding
      XDR.Decode(Payload(Message).all, Position, Raw_Level, Last);
      Position := Last + 1;
      if Raw_Level in Log_Level_Type'Pos(Log_Level_Type'First) .. Log_Level_Type'Pos(Log_Level_Type'Last) then
         Level := Log_Level_Type'Val(Raw_Level);
      else
         pragma Assert(Boolean'(False));
         Decode_Status := Malformed;
         return;
      end if;
      declare
         Msg_Content_Size : XDR_Unsigned;
      begin
         XDR.Decode(Payload(Message).all, Position, Msg_Content_Size, Last);
         Position := Last + 1;
         if Msg_Content_Size < 128 then
            declare
               Final_String_Size : constant XDR_Unsigned := Msg_Content_Size;
               subtype Definite_String is Log_Message_Type(1 .. Integer(Final_String_Size));
            begin
               Free(Msg_Content);
               Msg_Content := new Definite_String'(others => ' ');
               XDR.Decode(Payload(Message).all, Position, Msg_Content.all, Last);
               Position := Last + 1;
            end;
         else
            pragma Assert(Boolean'(False));
            Decode_Status := Malformed;
            return;
         end if;
      end;
   end Log_Text_Decode;
   
   

end CubedOS.Log_Server.API;
