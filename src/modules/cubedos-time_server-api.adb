--------------------------------------------------------------------------------
-- FILE   : %FILENAME%
-- SUBJECT: Body of a package that implements the CubedOS.Time_Server API
-- AUTHOR : (C) Copyright 2021 by Vermont Technical College
--
-- All the subprograms in this package are task safe.
--
-- THIS FILE WAS GENERATED BY Merc. DO NOT EDIT!!
--------------------------------------------------------------------------------
pragma SPARK_Mode(On);

with Ada.Real_Time;
use Ada.Real_Time;
pragma Warnings(Off);

with CubedOS.Lib.XDR;
with CubedOS.Lib;
use  CubedOS.Lib;
use  CubedOS.Lib.XDR;
with CubedOS.Message_Types.Mutable; use CubedOS.Message_Types.Mutable;

package body CubedOS.Time_Server.API is

   procedure Free is new Ada.Unchecked_Deallocation(String, String_Ptr);
   procedure Relative_Request_Encode
      (Receiver_Address : in Message_Address;
      Sender_Address : in Message_Address;
      Request_ID : in Request_ID_Type;
      Tick_Interval : in Ada.Real_Time.Time_Span;
      Request_Type : in Series_Type;
      Series_ID : in Series_ID_Type;
      Priority : in System.Priority := System.Default_Priority;
      Result : out  Message_Record)
   is
      subtype Data_Index_Type is XDR_Index_Type range 0 .. 1023;
      Position   : Data_Index_Type;
      Last       : Data_Index_Type;
      subtype Definite_Data_Array is Data_Array(Data_Index_Type);
      Payload : Data_Array_Owner := new Definite_Data_Array'(others => 0);
      Message : Mutable_Message_Record;
   begin
      Position := 0;
      declare
         type Time_Float is delta 0.000_000_001 digits 18;
         type Big_Float is delta 1.0 digits 18;
      begin
         XDR.Encode(XDR_Unsigned_Hyper(Time_Float(To_Duration(Tick_Interval)) * Big_Float(1_000_000_000.0)), Payload.all, Position, Last);
         Position := Last + 1;
      end;
      XDR.Encode(XDR.XDR_Unsigned(Series_Type'Pos(Request_Type)), Payload.all, Position, Last);
      Position := Last + 1;
      XDR.Encode(XDR.XDR_Unsigned(Series_ID), Payload.all, Position, Last);
      Position := Last + 1;
      Make_Empty_Message (
         Sender_Address   => Sender_Address,
         Receiver_Address => Receiver_Address,
         Request_ID   => Request_ID,
         Message_Type => Relative_Request_Msg,
         Payload => Payload,
         Result => Message,
         Priority   => Priority);
      Result := Immutable(Message);
      Delete(Message);
      pragma Unused(Last, Payload, Position, Message);
   end Relative_Request_Encode;
   
   procedure Send_Relative_Request
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Tick_Interval : in Ada.Real_Time.Time_Span;
      Request_Type : in Series_Type;
      Series_ID : in Series_ID_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Relative_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Tick_Interval => Tick_Interval,
         Request_Type => Request_Type,
         Series_ID => Series_ID,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Status);
   end Send_Relative_Request;
   
   procedure Send_Relative_Request
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Tick_Interval : in Ada.Real_Time.Time_Span;
      Request_Type : in Series_Type;
      Series_ID : in Series_ID_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Relative_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Tick_Interval => Tick_Interval,
         Request_Type => Request_Type,
         Series_ID => Series_ID,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message);
   end Send_Relative_Request;
   
   procedure Send_Relative_Request
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Tick_Interval : in Ada.Real_Time.Time_Span;
      Request_Type : in Series_Type;
      Series_ID : in Series_ID_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Relative_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Domain_ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Tick_Interval => Tick_Interval,
         Request_Type => Request_Type,
         Series_ID => Series_ID,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, This_Domain, Status);
   end Send_Relative_Request;
   
   procedure Send_Relative_Request
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Tick_Interval : in Ada.Real_Time.Time_Span;
      Request_Type : in Series_Type;
      Series_ID : in Series_ID_Type;
      Receiving_Domain : Domain_Metadata := This_Domain;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
      Status : Status_Type := Unavailable;
   begin
      pragma Assert(Payload(Message) = null);
      Relative_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Receiving_Domain.ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Tick_Interval => Tick_Interval,
         Request_Type => Request_Type,
         Series_ID => Series_ID,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, Receiving_Domain, Status);
      pragma Unused(Status);
   end Send_Relative_Request;
   
   procedure Relative_Request_Decode
      (Message : in Message_Record;
      Tick_Interval : out Ada.Real_Time.Time_Span;
      Request_Type : out Series_Type;
      Series_ID : out Series_ID_Type;
      Decode_Status : out Message_Status_Type)
   is
      Position : Data_Index_Type;
      Raw_Tick_Interval  : XDR.XDR_Unsigned_Hyper;
      Raw_Request_Type : XDR.XDR_Unsigned;
      Raw_Series_ID : XDR_Unsigned;
      Last : Data_Index_Type;
   begin
      Decode_Status := Success;
      Tick_Interval := Ada.Real_Time.Time_Span(Time_Span_Zero);
      Request_Type := Series_Type'First;
      Series_ID := Series_ID_Type'Last;
      Position := 0;
      
      -- Begin Decoding
      XDR.Decode(Payload(Message).all, Position, Raw_Tick_Interval, Last);
      Position := Last + 1;
      Tick_Interval := Seconds(Integer(Raw_Tick_Interval / 1_000_000_000)) + Nanoseconds(Integer(Raw_Tick_Interval mod 1_000_000_000));
      XDR.Decode(Payload(Message).all, Position, Raw_Request_Type, Last);
      Position := Last + 1;
      if Raw_Request_Type in Series_Type'Pos(Series_Type'First) .. Series_Type'Pos(Series_Type'Last) then
         Request_Type := Series_Type'Val(Raw_Request_Type);
      else
         pragma Assert(Boolean'(False));
         Decode_Status := Malformed;
         return;
      end if;
      XDR.Decode(Payload(Message).all, Position, Raw_Series_ID, Last);
      Position := Last + 1;
      if Raw_Series_ID in XDR.XDR_Unsigned(Series_ID_Type'First) .. XDR.XDR_Unsigned(Series_ID_Type'Last) then
         Series_ID := Series_ID_Type(Raw_Series_ID);
      else
         pragma Assert(Boolean'(False));
         Decode_Status := Malformed;
         return;
      end if;
   end Relative_Request_Decode;
   
   
   procedure Absolute_Request_Encode
      (Receiver_Address : in Message_Address;
      Sender_Address : in Message_Address;
      Request_ID : in Request_ID_Type;
      Tick_Time : in Ada.Real_Time.Time;
      Series_ID : in Series_ID_Type;
      Priority : in System.Priority := System.Default_Priority;
      Result : out  Message_Record)
   is
      subtype Data_Index_Type is XDR_Index_Type range 0 .. 1023;
      Position   : Data_Index_Type;
      Last       : Data_Index_Type;
      subtype Definite_Data_Array is Data_Array(Data_Index_Type);
      Payload : Data_Array_Owner := new Definite_Data_Array'(others => 0);
      Message : Mutable_Message_Record;
   begin
      Position := 0;
      declare
         Seconds : Seconds_Count;
         Frac : Time_Span;
         Result : XDR_Unsigned_Hyper;
      begin
         Split(Tick_Time, Seconds, Frac);
         Result := XDR_Unsigned_Hyper(Seconds) * 1_000_000_000 + XDR_Unsigned_Hyper(To_Duration(Frac) * 1_000_000_000);
         XDR.Encode(Result, Payload.all, Position, Last);
         Position := Last + 1;
      end;
      XDR.Encode(XDR.XDR_Unsigned(Series_ID), Payload.all, Position, Last);
      Position := Last + 1;
      Make_Empty_Message (
         Sender_Address   => Sender_Address,
         Receiver_Address => Receiver_Address,
         Request_ID   => Request_ID,
         Message_Type => Absolute_Request_Msg,
         Payload => Payload,
         Result => Message,
         Priority   => Priority);
      Result := Immutable(Message);
      Delete(Message);
      pragma Unused(Last, Payload, Position, Message);
   end Absolute_Request_Encode;
   
   procedure Send_Absolute_Request
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Tick_Time : in Ada.Real_Time.Time;
      Series_ID : in Series_ID_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Absolute_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Tick_Time => Tick_Time,
         Series_ID => Series_ID,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Status);
   end Send_Absolute_Request;
   
   procedure Send_Absolute_Request
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Tick_Time : in Ada.Real_Time.Time;
      Series_ID : in Series_ID_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Absolute_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Tick_Time => Tick_Time,
         Series_ID => Series_ID,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message);
   end Send_Absolute_Request;
   
   procedure Send_Absolute_Request
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Tick_Time : in Ada.Real_Time.Time;
      Series_ID : in Series_ID_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Absolute_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Domain_ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Tick_Time => Tick_Time,
         Series_ID => Series_ID,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, This_Domain, Status);
   end Send_Absolute_Request;
   
   procedure Send_Absolute_Request
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Tick_Time : in Ada.Real_Time.Time;
      Series_ID : in Series_ID_Type;
      Receiving_Domain : Domain_Metadata := This_Domain;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
      Status : Status_Type := Unavailable;
   begin
      pragma Assert(Payload(Message) = null);
      Absolute_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Receiving_Domain.ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Tick_Time => Tick_Time,
         Series_ID => Series_ID,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, Receiving_Domain, Status);
      pragma Unused(Status);
   end Send_Absolute_Request;
   
   procedure Absolute_Request_Decode
      (Message : in Message_Record;
      Tick_Time : out Ada.Real_Time.Time;
      Series_ID : out Series_ID_Type;
      Decode_Status : out Message_Status_Type)
   is
      Position : Data_Index_Type;
      Raw_Tick_Time   : XDR.XDR_Unsigned_Hyper;
      Raw_Series_ID : XDR_Unsigned;
      Last : Data_Index_Type;
   begin
      Decode_Status := Success;
      Tick_Time := Ada.Real_Time.Time(Time_First);
      Series_ID := Series_ID_Type'Last;
      Position := 0;
      
      -- Begin Decoding
      XDR.Decode(Payload(Message).all, Position, Raw_Tick_Time, Last);
      Position := Last + 1;
      Tick_Time := Ada.Real_Time.Time(Ada.Real_Time.Time_Of(Seconds_Count(Raw_Tick_Time / 1_000_000_000), Nanoseconds(Integer(Raw_Tick_Time mod 1_000_000_000))));
      XDR.Decode(Payload(Message).all, Position, Raw_Series_ID, Last);
      Position := Last + 1;
      if Raw_Series_ID in XDR.XDR_Unsigned(Series_ID_Type'First) .. XDR.XDR_Unsigned(Series_ID_Type'Last) then
         Series_ID := Series_ID_Type(Raw_Series_ID);
      else
         pragma Assert(Boolean'(False));
         Decode_Status := Malformed;
         return;
      end if;
   end Absolute_Request_Decode;
   
   
   procedure Tick_Reply_Encode
      (Receiver_Address : in Message_Address;
      Sender_Address : in Message_Address;
      Request_ID : in Request_ID_Type;
      Series_ID : in Series_ID_Type;
      Count : in Series_Count_Type;
      Priority : in System.Priority := System.Default_Priority;
      Result : out  Message_Record)
   is
      subtype Data_Index_Type is XDR_Index_Type range 0 .. 1023;
      Position   : Data_Index_Type;
      Last       : Data_Index_Type;
      subtype Definite_Data_Array is Data_Array(Data_Index_Type);
      Payload : Data_Array_Owner := new Definite_Data_Array'(others => 0);
      Message : Mutable_Message_Record;
   begin
      Position := 0;
      XDR.Encode(XDR.XDR_Unsigned(Series_ID), Payload.all, Position, Last);
      Position := Last + 1;
      XDR.Encode(XDR.XDR_Unsigned(Count), Payload.all, Position, Last);
      Position := Last + 1;
      Make_Empty_Message (
         Sender_Address   => Sender_Address,
         Receiver_Address => Receiver_Address,
         Request_ID   => Request_ID,
         Message_Type => Tick_Reply_Msg,
         Payload => Payload,
         Result => Message,
         Priority   => Priority);
      Result := Immutable(Message);
      Delete(Message);
      pragma Unused(Last, Payload, Position, Message);
   end Tick_Reply_Encode;
   
   procedure Send_Tick_Reply
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Series_ID : in Series_ID_Type;
      Count : in Series_Count_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Tick_Reply_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Series_ID => Series_ID,
         Count => Count,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Status);
   end Send_Tick_Reply;
   
   procedure Send_Tick_Reply
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Series_ID : in Series_ID_Type;
      Count : in Series_Count_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Tick_Reply_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Series_ID => Series_ID,
         Count => Count,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message);
   end Send_Tick_Reply;
   
   procedure Send_Tick_Reply
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Series_ID : in Series_ID_Type;
      Count : in Series_Count_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Tick_Reply_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Domain_ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Series_ID => Series_ID,
         Count => Count,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, This_Domain, Status);
   end Send_Tick_Reply;
   
   procedure Send_Tick_Reply
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Series_ID : in Series_ID_Type;
      Count : in Series_Count_Type;
      Receiving_Domain : Domain_Metadata := This_Domain;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
      Status : Status_Type := Unavailable;
   begin
      pragma Assert(Payload(Message) = null);
      Tick_Reply_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Receiving_Domain.ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Series_ID => Series_ID,
         Count => Count,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, Receiving_Domain, Status);
      pragma Unused(Status);
   end Send_Tick_Reply;
   
   procedure Tick_Reply_Decode
      (Message : in Message_Record;
      Series_ID : out Series_ID_Type;
      Count : out Series_Count_Type;
      Decode_Status : out Message_Status_Type)
   is
      Position : Data_Index_Type;
      Raw_Series_ID : XDR_Unsigned;
      Raw_Count : XDR_Unsigned;
      Last : Data_Index_Type;
   begin
      Decode_Status := Success;
      Series_ID := Series_ID_Type'Last;
      Count := Series_Count_Type'Last;
      Position := 0;
      
      -- Begin Decoding
      XDR.Decode(Payload(Message).all, Position, Raw_Series_ID, Last);
      Position := Last + 1;
      if Raw_Series_ID in XDR.XDR_Unsigned(Series_ID_Type'First) .. XDR.XDR_Unsigned(Series_ID_Type'Last) then
         Series_ID := Series_ID_Type(Raw_Series_ID);
      else
         pragma Assert(Boolean'(False));
         Decode_Status := Malformed;
         return;
      end if;
      XDR.Decode(Payload(Message).all, Position, Raw_Count, Last);
      Position := Last + 1;
      if Raw_Count in XDR.XDR_Unsigned(Series_Count_Type'First) .. XDR.XDR_Unsigned(Series_Count_Type'Last) then
         Count := Series_Count_Type(Raw_Count);
      else
         pragma Assert(Boolean'(False));
         Decode_Status := Malformed;
         return;
      end if;
   end Tick_Reply_Decode;
   
   
   procedure Cancel_Request_Encode
      (Receiver_Address : in Message_Address;
      Sender_Address : in Message_Address;
      Request_ID : in Request_ID_Type;
      Series_ID : in Series_ID_Type;
      Priority : in System.Priority := System.Default_Priority;
      Result : out  Message_Record)
   is
      subtype Data_Index_Type is XDR_Index_Type range 0 .. 1023;
      Position   : Data_Index_Type;
      Last       : Data_Index_Type;
      subtype Definite_Data_Array is Data_Array(Data_Index_Type);
      Payload : Data_Array_Owner := new Definite_Data_Array'(others => 0);
      Message : Mutable_Message_Record;
   begin
      Position := 0;
      XDR.Encode(XDR.XDR_Unsigned(Series_ID), Payload.all, Position, Last);
      Position := Last + 1;
      Make_Empty_Message (
         Sender_Address   => Sender_Address,
         Receiver_Address => Receiver_Address,
         Request_ID   => Request_ID,
         Message_Type => Cancel_Request_Msg,
         Payload => Payload,
         Result => Message,
         Priority   => Priority);
      Result := Immutable(Message);
      Delete(Message);
      pragma Unused(Last, Payload, Position, Message);
   end Cancel_Request_Encode;
   
   procedure Send_Cancel_Request
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Series_ID : in Series_ID_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Cancel_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Series_ID => Series_ID,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Status);
   end Send_Cancel_Request;
   
   procedure Send_Cancel_Request
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Series_ID : in Series_ID_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Cancel_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Series_ID => Series_ID,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message);
   end Send_Cancel_Request;
   
   procedure Send_Cancel_Request
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Series_ID : in Series_ID_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Cancel_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Domain_ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Series_ID => Series_ID,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, This_Domain, Status);
   end Send_Cancel_Request;
   
   procedure Send_Cancel_Request
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Series_ID : in Series_ID_Type;
      Receiving_Domain : Domain_Metadata := This_Domain;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
      Status : Status_Type := Unavailable;
   begin
      pragma Assert(Payload(Message) = null);
      Cancel_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Receiving_Domain.ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Series_ID => Series_ID,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, Receiving_Domain, Status);
      pragma Unused(Status);
   end Send_Cancel_Request;
   
   procedure Cancel_Request_Decode
      (Message : in Message_Record;
      Series_ID : out Series_ID_Type;
      Decode_Status : out Message_Status_Type)
   is
      Position : Data_Index_Type;
      Raw_Series_ID : XDR_Unsigned;
      Last : Data_Index_Type;
   begin
      Decode_Status := Success;
      Series_ID := Series_ID_Type'Last;
      Position := 0;
      
      -- Begin Decoding
      XDR.Decode(Payload(Message).all, Position, Raw_Series_ID, Last);
      Position := Last + 1;
      if Raw_Series_ID in XDR.XDR_Unsigned(Series_ID_Type'First) .. XDR.XDR_Unsigned(Series_ID_Type'Last) then
         Series_ID := Series_ID_Type(Raw_Series_ID);
      else
         pragma Assert(Boolean'(False));
         Decode_Status := Malformed;
         return;
      end if;
   end Cancel_Request_Decode;
   
   

end CubedOS.Time_Server.API;
