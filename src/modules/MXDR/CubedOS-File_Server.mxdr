// FILE: file_server.mxdr
//
// The interface definition of the core CubedOS file server module.

enum Mode_Type { Read, Write };

// File handles are integers. The special value 0 is used for invalid files.
const Invalid_Handle = 0;
typedef unsigned int File_Handle_Type range 0 .. 64;
typedef unsigned int Valid_File_Handle_Type range 1 .. 64;

// Merc currently doesn't know how to handle typed constants (but it should)
// const File_Handle_Type Invalid_Handle = 0;

// Types to count the number of octets read/written.
const Maximum_Read_Size = 256;
const Maximum_Write_Size = 256;
typedef unsigned int Read_Result_Size_Type range 0 .. Maximum_Read_Size;
typedef unsigned int Read_Size_Type range 1 .. Maximum_Read_Size;
typedef unsigned int Write_Result_Size_Type range 0 .. Maximum_Write_Size;
typedef unsigned int Write_Size_Type range 1 .. Maximum_Write_Size;

// Open the named file in the given mode.
// There needs to be a precondition on the encoding function related to the name's length.
message struct -> Open_Request {
    Mode_Type        Mode;
    string           Name<>;
};

// Returns the file handle associated with a previous open request or the invalid handle if the
// open operation failed.
message struct <- Open_Reply {
    File_Handle_Type Handle;
};

// Request that Amount octets be read from the indicated file.
message struct -> Read_Request {
    Valid_File_Handle_Type Handle;
    Read_Size_Type         Amount;
};

// Returns data from the file. The Amount parameter indicates how much space in File_Data is used.
message struct <- Read_Reply {
    Valid_File_Handle_Type Handle;
    Read_Result_Size_Type  Amount;
    opaque                 File_Data<>;
};

// Request that Amount octets from File_Data be written to the indicated file.
message struct -> Write_Request {
    Valid_File_Handle_Type Handle;
    Write_Size_Type        Amount;
    opaque                 File_Data<>;
};

// Returns how many octets were actually written.
message struct <- Write_Reply {
    Valid_File_Handle_Type Handle;
    Write_Result_Size_Type Amount;
};

// Close the indicated file.
message struct -> Close_Request {
    Valid_File_Handle_Type Handle;
};
