--------------------------------------------------------------------------------
-- FILE   : cubedos-file_server-api.adb
-- SUBJECT: Body of a package that implements the CubedOS.File_Server API
-- AUTHOR : (C) Copyright 2021 by Vermont Technical College
--
-- All the subprograms in this package are task safe.
--
-- THIS FILE WAS GENERATED BY Merc. DO NOT EDIT!!
--------------------------------------------------------------------------------
pragma SPARK_Mode(On);
pragma Warnings(Off);

with CubedOS.Lib.XDR;
with CubedOS.Lib;
use  CubedOS.Lib;
use  CubedOS.Lib.XDR;
with CubedOS.Message_Types.Mutable; use CubedOS.Message_Types.Mutable;

package body CubedOS.File_Server.API is

   procedure Free is new Ada.Unchecked_Deallocation(String, String_Ptr);
   procedure Free is new Ada.Unchecked_Deallocation(Octet_Array, Octet_Array_Ptr);
   procedure Open_Request_Encode
      (Receiver_Address : in Message_Address;
      Sender_Address : in Message_Address;
      Request_ID : in Request_ID_Type;
      Mode : in Mode_Type;
      Name : in File_Name_Type;
      Priority : in System.Priority := System.Default_Priority;
      Result : out  Message_Record)
   is
      subtype Data_Index_Type is XDR_Index_Type range 0 .. 1023;
      Position   : Data_Index_Type;
      Last       : Data_Index_Type;
      subtype Definite_Data_Array is Data_Array(Data_Index_Type);
      Payload : Data_Array_Owner := new Definite_Data_Array'(others => 0);
      Message : Mutable_Message_Record;
   begin
      Position := 0;
      XDR.Encode(XDR.XDR_Unsigned(Mode_Type'Pos(Mode)), Payload.all, Position, Last);
      Position := Last + 1;
      XDR.Encode(XDR.XDR_Unsigned(Name'Length), Payload.all, Position, Last);
      Position := Last + 1;
      XDR.Encode(String(Name), Payload.all, Position, Last);
      Position := Last + 1;
      Make_Empty_Message (
         Sender_Address   => Sender_Address,
         Receiver_Address => Receiver_Address,
         Request_ID   => Request_ID,
         Message_Type => Open_Request_Msg,
         Payload => Payload,
         Result => Message,
         Priority   => Priority);
      Result := Immutable(Message);
      Delete(Message);
      pragma Unused(Last, Payload, Position, Message);
   end Open_Request_Encode;
   
   procedure Send_Open_Request
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Mode : in Mode_Type;
      Name : in File_Name_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Open_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Mode => Mode,
         Name => Name,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Status);
   end Send_Open_Request;
   
   procedure Send_Open_Request
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Mode : in Mode_Type;
      Name : in File_Name_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Open_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Mode => Mode,
         Name => Name,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message);
   end Send_Open_Request;
   
   procedure Send_Open_Request
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Mode : in Mode_Type;
      Name : in File_Name_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Open_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Domain_ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Mode => Mode,
         Name => Name,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, This_Domain, Status);
   end Send_Open_Request;
   
   procedure Send_Open_Request
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Mode : in Mode_Type;
      Name : in File_Name_Type;
      Receiving_Domain : Domain_Metadata := This_Domain;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
      Status : Status_Type := Unavailable;
   begin
      pragma Assert(Payload(Message) = null);
      Open_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Receiving_Domain.ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Mode => Mode,
         Name => Name,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, Receiving_Domain, Status);
      pragma Unused(Status);
   end Send_Open_Request;
   
   procedure Open_Request_Decode
      (Message : in Message_Record;
      Mode : out Mode_Type;
      Name : out File_Name_Type_Ptr;
      Decode_Status : out Message_Status_Type)
   is
      Position : Data_Index_Type;
      Raw_Mode : XDR.XDR_Unsigned;
      Raw_Name_Size : XDR.XDR_Unsigned;
      Last : Data_Index_Type;
   begin
      Decode_Status := Success;
      Mode := Mode_Type'First;
      declare
         subtype Definite_String is File_Name_Type(1..0);
      begin
         Name := new Definite_String'(others => ' ');
      end;
      Position := 0;
      
      -- Begin Decoding
      XDR.Decode(Payload(Message).all, Position, Raw_Mode, Last);
      Position := Last + 1;
      if Raw_Mode in Mode_Type'Pos(Mode_Type'First) .. Mode_Type'Pos(Mode_Type'Last) then
         Mode := Mode_Type'Val(Raw_Mode);
      else
         Decode_Status := Malformed;
         return;
      end if;
      declare
         Name_Size : XDR_Unsigned;
      begin
         XDR.Decode(Payload(Message).all, Position, Name_Size, Last);
         Position := Last + 1;
         if Name_Size < 256 then
            declare
               Final_String_Size : constant XDR_Unsigned := Name_Size;
               subtype Definite_String is File_Name_Type(1 .. Integer(Final_String_Size));
            begin
               Free(Name);
               Name := new Definite_String'(others => ' ');
               XDR.Decode(Payload(Message).all, Position, Name.all, Last);
               Position := Last + 1;
            end;
         else
            Decode_Status := Malformed;
            return;
         end if;
      end;
   end Open_Request_Decode;
   
   
   procedure Open_Reply_Encode
      (Receiver_Address : in Message_Address;
      Sender_Address : in Message_Address;
      Request_ID : in Request_ID_Type;
      Handle : in File_Handle_Type;
      Priority : in System.Priority := System.Default_Priority;
      Result : out  Message_Record)
   is
      subtype Data_Index_Type is XDR_Index_Type range 0 .. 1023;
      Position   : Data_Index_Type;
      Last       : Data_Index_Type;
      subtype Definite_Data_Array is Data_Array(Data_Index_Type);
      Payload : Data_Array_Owner := new Definite_Data_Array'(others => 0);
      Message : Mutable_Message_Record;
   begin
      Position := 0;
      XDR.Encode(XDR.XDR_Unsigned(Handle), Payload.all, Position, Last);
      Position := Last + 1;
      Make_Empty_Message (
         Sender_Address   => Sender_Address,
         Receiver_Address => Receiver_Address,
         Request_ID   => Request_ID,
         Message_Type => Open_Reply_Msg,
         Payload => Payload,
         Result => Message,
         Priority   => Priority);
      Result := Immutable(Message);
      Delete(Message);
      pragma Unused(Last, Payload, Position, Message);
   end Open_Reply_Encode;
   
   procedure Send_Open_Reply
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Handle : in File_Handle_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Open_Reply_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Handle => Handle,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Status);
   end Send_Open_Reply;
   
   procedure Send_Open_Reply
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Handle : in File_Handle_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Open_Reply_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Handle => Handle,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message);
   end Send_Open_Reply;
   
   procedure Send_Open_Reply
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Handle : in File_Handle_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Open_Reply_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Domain_ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Handle => Handle,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, This_Domain, Status);
   end Send_Open_Reply;
   
   procedure Send_Open_Reply
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Handle : in File_Handle_Type;
      Receiving_Domain : Domain_Metadata := This_Domain;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
      Status : Status_Type := Unavailable;
   begin
      pragma Assert(Payload(Message) = null);
      Open_Reply_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Receiving_Domain.ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Handle => Handle,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, Receiving_Domain, Status);
      pragma Unused(Status);
   end Send_Open_Reply;
   
   procedure Open_Reply_Decode
      (Message : in Message_Record;
      Handle : out File_Handle_Type;
      Decode_Status : out Message_Status_Type)
   is
      Position : Data_Index_Type;
      Raw_Handle : XDR_Unsigned;
      Last : Data_Index_Type;
   begin
      Decode_Status := Success;
      Handle := File_Handle_Type'Last;
      Position := 0;
      
      -- Begin Decoding
      XDR.Decode(Payload(Message).all, Position, Raw_Handle, Last);
      Position := Last + 1;
      if Raw_Handle in XDR.XDR_Unsigned(File_Handle_Type'First) .. XDR.XDR_Unsigned(File_Handle_Type'Last) then
         Handle := File_Handle_Type(Raw_Handle);
      else
         Decode_Status := Malformed;
         return;
      end if;
   end Open_Reply_Decode;
   
   
   procedure Read_Request_Encode
      (Receiver_Address : in Message_Address;
      Sender_Address : in Message_Address;
      Request_ID : in Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      Amount : in Read_Size_Type;
      Priority : in System.Priority := System.Default_Priority;
      Result : out  Message_Record)
   is
      subtype Data_Index_Type is XDR_Index_Type range 0 .. 1023;
      Position   : Data_Index_Type;
      Last       : Data_Index_Type;
      subtype Definite_Data_Array is Data_Array(Data_Index_Type);
      Payload : Data_Array_Owner := new Definite_Data_Array'(others => 0);
      Message : Mutable_Message_Record;
   begin
      Position := 0;
      XDR.Encode(XDR.XDR_Unsigned(Handle), Payload.all, Position, Last);
      Position := Last + 1;
      XDR.Encode(XDR.XDR_Unsigned(Amount), Payload.all, Position, Last);
      Position := Last + 1;
      Make_Empty_Message (
         Sender_Address   => Sender_Address,
         Receiver_Address => Receiver_Address,
         Request_ID   => Request_ID,
         Message_Type => Read_Request_Msg,
         Payload => Payload,
         Result => Message,
         Priority   => Priority);
      Result := Immutable(Message);
      Delete(Message);
      pragma Unused(Last, Payload, Position, Message);
   end Read_Request_Encode;
   
   procedure Send_Read_Request
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      Amount : in Read_Size_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Read_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Handle => Handle,
         Amount => Amount,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Status);
   end Send_Read_Request;
   
   procedure Send_Read_Request
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      Amount : in Read_Size_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Read_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Handle => Handle,
         Amount => Amount,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message);
   end Send_Read_Request;
   
   procedure Send_Read_Request
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      Amount : in Read_Size_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Read_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Domain_ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Handle => Handle,
         Amount => Amount,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, This_Domain, Status);
   end Send_Read_Request;
   
   procedure Send_Read_Request
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      Amount : in Read_Size_Type;
      Receiving_Domain : Domain_Metadata := This_Domain;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
      Status : Status_Type := Unavailable;
   begin
      pragma Assert(Payload(Message) = null);
      Read_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Receiving_Domain.ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Handle => Handle,
         Amount => Amount,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, Receiving_Domain, Status);
      pragma Unused(Status);
   end Send_Read_Request;
   
   procedure Read_Request_Decode
      (Message : in Message_Record;
      Handle : out Valid_File_Handle_Type;
      Amount : out Read_Size_Type;
      Decode_Status : out Message_Status_Type)
   is
      Position : Data_Index_Type;
      Raw_Handle : XDR_Unsigned;
      Raw_Amount : XDR_Unsigned;
      Last : Data_Index_Type;
   begin
      Decode_Status := Success;
      Handle := Valid_File_Handle_Type'Last;
      Amount := Read_Size_Type'Last;
      Position := 0;
      
      -- Begin Decoding
      XDR.Decode(Payload(Message).all, Position, Raw_Handle, Last);
      Position := Last + 1;
      if Raw_Handle in XDR.XDR_Unsigned(Valid_File_Handle_Type'First) .. XDR.XDR_Unsigned(Valid_File_Handle_Type'Last) then
         Handle := Valid_File_Handle_Type(Raw_Handle);
      else
         Decode_Status := Malformed;
         return;
      end if;
      XDR.Decode(Payload(Message).all, Position, Raw_Amount, Last);
      Position := Last + 1;
      if Raw_Amount in XDR.XDR_Unsigned(Read_Size_Type'First) .. XDR.XDR_Unsigned(Read_Size_Type'Last) then
         Amount := Read_Size_Type(Raw_Amount);
      else
         Decode_Status := Malformed;
         return;
      end if;
   end Read_Request_Decode;
   
   
   procedure Read_Reply_Encode
      (Receiver_Address : in Message_Address;
      Sender_Address : in Message_Address;
      Request_ID : in Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      File_Data : in Octet_Array;
      Priority : in System.Priority := System.Default_Priority;
      Result : out  Message_Record)
   is
      subtype Data_Index_Type is XDR_Index_Type range 0 .. 1023;
      Position   : Data_Index_Type;
      Last       : Data_Index_Type;
      subtype Definite_Data_Array is Data_Array(Data_Index_Type);
      Payload : Data_Array_Owner := new Definite_Data_Array'(others => 0);
      Message : Mutable_Message_Record;
   begin
      Position := 0;
      XDR.Encode(XDR.XDR_Unsigned(Handle), Payload.all, Position, Last);
      Position := Last + 1;
      XDR.Encode(XDR.XDR_Unsigned(File_Data'Length), Payload.all, Position, Last);
      Position := Last + 1;
      XDR.Encode(Octet_Array(File_Data), Payload.all, Position, Last);
      Position := Last + 1;
      Make_Empty_Message (
         Sender_Address   => Sender_Address,
         Receiver_Address => Receiver_Address,
         Request_ID   => Request_ID,
         Message_Type => Read_Reply_Msg,
         Payload => Payload,
         Result => Message,
         Priority   => Priority);
      Result := Immutable(Message);
      Delete(Message);
      pragma Unused(Last, Payload, Position, Message);
   end Read_Reply_Encode;
   
   procedure Send_Read_Reply
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      File_Data : in Octet_Array;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Read_Reply_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Handle => Handle,
         File_Data => File_Data,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Status);
   end Send_Read_Reply;
   
   procedure Send_Read_Reply
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      File_Data : in Octet_Array;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Read_Reply_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Handle => Handle,
         File_Data => File_Data,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message);
   end Send_Read_Reply;
   
   procedure Send_Read_Reply
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      File_Data : in Octet_Array;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Read_Reply_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Domain_ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Handle => Handle,
         File_Data => File_Data,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, This_Domain, Status);
   end Send_Read_Reply;
   
   procedure Send_Read_Reply
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      File_Data : in Octet_Array;
      Receiving_Domain : Domain_Metadata := This_Domain;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
      Status : Status_Type := Unavailable;
   begin
      pragma Assert(Payload(Message) = null);
      Read_Reply_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Receiving_Domain.ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Handle => Handle,
         File_Data => File_Data,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, Receiving_Domain, Status);
      pragma Unused(Status);
   end Send_Read_Reply;
   
   procedure Read_Reply_Decode
      (Message : in Message_Record;
      Handle : out Valid_File_Handle_Type;
      File_Data : out Octet_Array_Ptr;
      Decode_Status : out Message_Status_Type)
   is
      Position : Data_Index_Type;
      Raw_Handle : XDR_Unsigned;
      Last : Data_Index_Type;
   begin
      Decode_Status := Success;
      Handle := Valid_File_Handle_Type'Last;
      File_Data := new Octet_Array'(Octet_Array(Zero_Width_Octet_Array));
      Position := 0;
      
      -- Begin Decoding
      XDR.Decode(Payload(Message).all, Position, Raw_Handle, Last);
      Position := Last + 1;
      if Raw_Handle in XDR.XDR_Unsigned(Valid_File_Handle_Type'First) .. XDR.XDR_Unsigned(Valid_File_Handle_Type'Last) then
         Handle := Valid_File_Handle_Type(Raw_Handle);
      else
         Decode_Status := Malformed;
         return;
      end if;
      declare
         File_Data_Size : XDR_Unsigned;
      begin
         XDR.Decode(Payload(Message).all, Position, File_Data_Size, Last);
         Position := Last + 1;
         if File_Data_Size <= XDR_Unsigned(Max_Read_Size) then
            declare
               Final_Size : constant XDR_Unsigned := File_Data_Size;
               subtype Definite_Octet_Array is Octet_Array(0 .. Natural(Final_Size) - 1);
            begin
               Free(File_Data);
               File_Data := new Definite_Octet_Array'(others => 0);
            end;
            XDR.Decode(Payload(Message).all, Position, Octet_Array(File_Data.all), Last);
            Position := Last + 1;
         else
            Decode_Status := Malformed;
            return;
         end if;
      end;
   end Read_Reply_Decode;
   
   
   procedure Write_Request_Encode
      (Receiver_Address : in Message_Address;
      Sender_Address : in Message_Address;
      Request_ID : in Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      File_Data : in Octet_Array;
      Priority : in System.Priority := System.Default_Priority;
      Result : out  Message_Record)
   is
      subtype Data_Index_Type is XDR_Index_Type range 0 .. 1023;
      Position   : Data_Index_Type;
      Last       : Data_Index_Type;
      subtype Definite_Data_Array is Data_Array(Data_Index_Type);
      Payload : Data_Array_Owner := new Definite_Data_Array'(others => 0);
      Message : Mutable_Message_Record;
   begin
      Position := 0;
      XDR.Encode(XDR.XDR_Unsigned(Handle), Payload.all, Position, Last);
      Position := Last + 1;
      XDR.Encode(XDR.XDR_Unsigned(File_Data'Length), Payload.all, Position, Last);
      Position := Last + 1;
      XDR.Encode(Octet_Array(File_Data), Payload.all, Position, Last);
      Position := Last + 1;
      Make_Empty_Message (
         Sender_Address   => Sender_Address,
         Receiver_Address => Receiver_Address,
         Request_ID   => Request_ID,
         Message_Type => Write_Request_Msg,
         Payload => Payload,
         Result => Message,
         Priority   => Priority);
      Result := Immutable(Message);
      Delete(Message);
      pragma Unused(Last, Payload, Position, Message);
   end Write_Request_Encode;
   
   procedure Send_Write_Request
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      File_Data : in Octet_Array;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Write_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Handle => Handle,
         File_Data => File_Data,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Status);
   end Send_Write_Request;
   
   procedure Send_Write_Request
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      File_Data : in Octet_Array;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Write_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Handle => Handle,
         File_Data => File_Data,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message);
   end Send_Write_Request;
   
   procedure Send_Write_Request
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      File_Data : in Octet_Array;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Write_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Domain_ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Handle => Handle,
         File_Data => File_Data,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, This_Domain, Status);
   end Send_Write_Request;
   
   procedure Send_Write_Request
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      File_Data : in Octet_Array;
      Receiving_Domain : Domain_Metadata := This_Domain;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
      Status : Status_Type := Unavailable;
   begin
      pragma Assert(Payload(Message) = null);
      Write_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Receiving_Domain.ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Handle => Handle,
         File_Data => File_Data,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, Receiving_Domain, Status);
      pragma Unused(Status);
   end Send_Write_Request;
   
   procedure Write_Request_Decode
      (Message : in Message_Record;
      Handle : out Valid_File_Handle_Type;
      File_Data : out Octet_Array_Ptr;
      Decode_Status : out Message_Status_Type)
   is
      Position : Data_Index_Type;
      Raw_Handle : XDR_Unsigned;
      Last : Data_Index_Type;
   begin
      Decode_Status := Success;
      Handle := Valid_File_Handle_Type'Last;
      File_Data := new Octet_Array'(Octet_Array(Zero_Width_Octet_Array));
      Position := 0;
      
      -- Begin Decoding
      XDR.Decode(Payload(Message).all, Position, Raw_Handle, Last);
      Position := Last + 1;
      if Raw_Handle in XDR.XDR_Unsigned(Valid_File_Handle_Type'First) .. XDR.XDR_Unsigned(Valid_File_Handle_Type'Last) then
         Handle := Valid_File_Handle_Type(Raw_Handle);
      else
         Decode_Status := Malformed;
         return;
      end if;
      declare
         File_Data_Size : XDR_Unsigned;
      begin
         XDR.Decode(Payload(Message).all, Position, File_Data_Size, Last);
         Position := Last + 1;
         if File_Data_Size <= XDR_Unsigned(Max_Write_Size) then
            declare
               Final_Size : constant XDR_Unsigned := File_Data_Size;
               subtype Definite_Octet_Array is Octet_Array(0 .. Natural(Final_Size) - 1);
            begin
               Free(File_Data);
               File_Data := new Definite_Octet_Array'(others => 0);
            end;
            XDR.Decode(Payload(Message).all, Position, Octet_Array(File_Data.all), Last);
            Position := Last + 1;
         else
            Decode_Status := Malformed;
            return;
         end if;
      end;
   end Write_Request_Decode;
   
   
   procedure Write_Reply_Encode
      (Receiver_Address : in Message_Address;
      Sender_Address : in Message_Address;
      Request_ID : in Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      Amount : in Write_Result_Size_Type;
      Priority : in System.Priority := System.Default_Priority;
      Result : out  Message_Record)
   is
      subtype Data_Index_Type is XDR_Index_Type range 0 .. 1023;
      Position   : Data_Index_Type;
      Last       : Data_Index_Type;
      subtype Definite_Data_Array is Data_Array(Data_Index_Type);
      Payload : Data_Array_Owner := new Definite_Data_Array'(others => 0);
      Message : Mutable_Message_Record;
   begin
      Position := 0;
      XDR.Encode(XDR.XDR_Unsigned(Handle), Payload.all, Position, Last);
      Position := Last + 1;
      XDR.Encode(XDR.XDR_Unsigned(Amount), Payload.all, Position, Last);
      Position := Last + 1;
      Make_Empty_Message (
         Sender_Address   => Sender_Address,
         Receiver_Address => Receiver_Address,
         Request_ID   => Request_ID,
         Message_Type => Write_Reply_Msg,
         Payload => Payload,
         Result => Message,
         Priority   => Priority);
      Result := Immutable(Message);
      Delete(Message);
      pragma Unused(Last, Payload, Position, Message);
   end Write_Reply_Encode;
   
   procedure Send_Write_Reply
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      Amount : in Write_Result_Size_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Write_Reply_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Handle => Handle,
         Amount => Amount,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Status);
   end Send_Write_Reply;
   
   procedure Send_Write_Reply
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      Amount : in Write_Result_Size_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Write_Reply_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Handle => Handle,
         Amount => Amount,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message);
   end Send_Write_Reply;
   
   procedure Send_Write_Reply
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      Amount : in Write_Result_Size_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Write_Reply_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Domain_ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Handle => Handle,
         Amount => Amount,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, This_Domain, Status);
   end Send_Write_Reply;
   
   procedure Send_Write_Reply
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      Amount : in Write_Result_Size_Type;
      Receiving_Domain : Domain_Metadata := This_Domain;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
      Status : Status_Type := Unavailable;
   begin
      pragma Assert(Payload(Message) = null);
      Write_Reply_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Receiving_Domain.ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Handle => Handle,
         Amount => Amount,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, Receiving_Domain, Status);
      pragma Unused(Status);
   end Send_Write_Reply;
   
   procedure Write_Reply_Decode
      (Message : in Message_Record;
      Handle : out Valid_File_Handle_Type;
      Amount : out Write_Result_Size_Type;
      Decode_Status : out Message_Status_Type)
   is
      Position : Data_Index_Type;
      Raw_Handle : XDR_Unsigned;
      Raw_Amount : XDR_Unsigned;
      Last : Data_Index_Type;
   begin
      Decode_Status := Success;
      Handle := Valid_File_Handle_Type'Last;
      Amount := Write_Result_Size_Type'Last;
      Position := 0;
      
      -- Begin Decoding
      XDR.Decode(Payload(Message).all, Position, Raw_Handle, Last);
      Position := Last + 1;
      if Raw_Handle in XDR.XDR_Unsigned(Valid_File_Handle_Type'First) .. XDR.XDR_Unsigned(Valid_File_Handle_Type'Last) then
         Handle := Valid_File_Handle_Type(Raw_Handle);
      else
         Decode_Status := Malformed;
         return;
      end if;
      XDR.Decode(Payload(Message).all, Position, Raw_Amount, Last);
      Position := Last + 1;
      if Raw_Amount in XDR.XDR_Unsigned(Write_Result_Size_Type'First) .. XDR.XDR_Unsigned(Write_Result_Size_Type'Last) then
         Amount := Write_Result_Size_Type(Raw_Amount);
      else
         Decode_Status := Malformed;
         return;
      end if;
   end Write_Reply_Decode;
   
   
   procedure Close_Request_Encode
      (Receiver_Address : in Message_Address;
      Sender_Address : in Message_Address;
      Request_ID : in Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      Priority : in System.Priority := System.Default_Priority;
      Result : out  Message_Record)
   is
      subtype Data_Index_Type is XDR_Index_Type range 0 .. 1023;
      Position   : Data_Index_Type;
      Last       : Data_Index_Type;
      subtype Definite_Data_Array is Data_Array(Data_Index_Type);
      Payload : Data_Array_Owner := new Definite_Data_Array'(others => 0);
      Message : Mutable_Message_Record;
   begin
      Position := 0;
      XDR.Encode(XDR.XDR_Unsigned(Handle), Payload.all, Position, Last);
      Position := Last + 1;
      Make_Empty_Message (
         Sender_Address   => Sender_Address,
         Receiver_Address => Receiver_Address,
         Request_ID   => Request_ID,
         Message_Type => Close_Request_Msg,
         Payload => Payload,
         Result => Message,
         Priority   => Priority);
      Result := Immutable(Message);
      Delete(Message);
      pragma Unused(Last, Payload, Position, Message);
   end Close_Request_Encode;
   
   procedure Send_Close_Request
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Close_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Handle => Handle,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Status);
   end Send_Close_Request;
   
   procedure Send_Close_Request
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Close_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         Handle => Handle,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message);
   end Send_Close_Request;
   
   procedure Send_Close_Request
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Close_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Domain_ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Handle => Handle,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, This_Domain, Status);
   end Send_Close_Request;
   
   procedure Send_Close_Request
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Handle : in Valid_File_Handle_Type;
      Receiving_Domain : Domain_Metadata := This_Domain;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
      Status : Status_Type := Unavailable;
   begin
      pragma Assert(Payload(Message) = null);
      Close_Request_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Receiving_Domain.ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         Handle => Handle,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, Receiving_Domain, Status);
      pragma Unused(Status);
   end Send_Close_Request;
   
   procedure Close_Request_Decode
      (Message : in Message_Record;
      Handle : out Valid_File_Handle_Type;
      Decode_Status : out Message_Status_Type)
   is
      Position : Data_Index_Type;
      Raw_Handle : XDR_Unsigned;
      Last : Data_Index_Type;
   begin
      Decode_Status := Success;
      Handle := Valid_File_Handle_Type'Last;
      Position := 0;
      
      -- Begin Decoding
      XDR.Decode(Payload(Message).all, Position, Raw_Handle, Last);
      Position := Last + 1;
      if Raw_Handle in XDR.XDR_Unsigned(Valid_File_Handle_Type'First) .. XDR.XDR_Unsigned(Valid_File_Handle_Type'Last) then
         Handle := Valid_File_Handle_Type(Raw_Handle);
      else
         Decode_Status := Malformed;
         return;
      end if;
   end Close_Request_Decode;
   
   

end CubedOS.File_Server.API;
