--------------------------------------------------------------------------------
-- FILE   : cubedos-log_server-api.ads
-- SUBJECT: Specification of a package that defines the CubedOS.Log_Server API
-- AUTHOR : (C) Copyright 2021 by Vermont Technical College
--
-- All the subprograms in this package are task safe.
--
-- THIS FILE WAS GENERATED BY Merc. DO NOT EDIT!!
--------------------------------------------------------------------------------
pragma SPARK_Mode(On);
pragma Warnings(Off);

with Name_Resolver;
with CubedOS.Lib; use CubedOS.Lib;
with Message_Manager;  use Message_Manager;
with CubedOS.Message_Types; use CubedOS.Message_Types;
with System;
with CubedOS.Lib.XDR; use CubedOS.Lib.XDR;
with Ada.Unchecked_Deallocation;


package CubedOS.Log_Server.API is

   pragma Elaborate_Body;
   type Octet_Array_Ptr is access CubedOS.Lib.Octet_Array;
   type String_Ptr is access String;
   
   This_Module : constant Module_ID_Type := Name_Resolver.Log_Server;
   
   type Message_Type is
      (Log_Text);

   Log_Text_Msg : constant Universal_Message_Type := (This_Module, Message_Type'Pos(Log_Text));
   
   This_Receives : aliased constant Message_Type_Array := (0 => Log_Text_Msg);
   Mail_Target : aliased constant Module_Metadata := Define_Module(This_Module, This_Receives'Access);
   
   type Log_Level_Type is (Debug, Informational, Warning, Error, Critical);

   Max_Log_Message_Size : constant Integer := 128;
   
   type Log_Message_Size_Type is range 0 .. Max_Log_Message_Size;
   
   type Log_Message_Index_Type is range 1 .. Max_Log_Message_Size;
   
   subtype Log_Message_Type is String
      with Dynamic_Predicate => Log_Message_Type'Last <= 128;
   type Log_Message_Type_Ptr is access Log_Message_Type;
   procedure Free is new Ada.Unchecked_Deallocation(Log_Message_Type, Log_Message_Type_Ptr);
   
   procedure Log_Text_Encode
      (Receiver_Address : in Message_Address;
      Sender_Address : in Message_Address;
      Request_ID : in Request_ID_Type;
      Level : in Log_Level_Type;
      Msg_Content : in Log_Message_Type;
      Priority : in System.Priority := System.Default_Priority;
      Result : out  Message_Record)
   with
      Pre => true
         and then (0 < Msg_Content'Length and Msg_Content'Length <= XDR_Size_Type'Last - 12)
         and then Receiver_Address.Module_ID = This_Module,
      Post => CubedOS.Message_Types.Message_Type(Result) = Log_Text_Msg
         and CubedOS.Message_Types.Sender_Address(Result) = Sender_Address
         and CubedOS.Message_Types.Receiver_Address(Result) = Receiver_Address
         and Payload(Result) /= null;

   procedure Send_Log_Text
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Level : in Log_Level_Type;
      Msg_Content : in Log_Message_Type;
      Priority : System.Priority := System.Default_Priority)
   with
      Global => (In_Out => Mailboxes),
      Pre => Messaging_Ready
         and then (0 < Msg_Content'Length and Msg_Content'Length <= XDR_Size_Type'Last - 12)
         and then Receiver_Address.Module_ID = This_Module
      ;

   procedure Send_Log_Text
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      Level : in Log_Level_Type;
      Msg_Content : in Log_Message_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   with
      Global => (In_Out => Mailboxes),
      Pre => Messaging_Ready
         and then (0 < Msg_Content'Length and Msg_Content'Length <= XDR_Size_Type'Last - 12)
         and then Receiver_Address.Module_ID = This_Module
         and then Receiver_Address.Domain_ID = Domain_ID
      ;

   procedure Send_Log_Text
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Level : in Log_Level_Type;
      Msg_Content : in Log_Message_Type;
      Receiving_Domain : Domain_Metadata := This_Domain;
      Priority : System.Priority := System.Default_Priority)
   with
      Global => (In_Out => Mailboxes),
      Pre => Messaging_Ready
         and then (0 < Msg_Content'Length and Msg_Content'Length <= XDR_Size_Type'Last - 12)
         and then Receiving_Module.Module_ID = This_Module
         and then Receives(Receiving_Module, Log_Text_Msg)
         and then Has_Module(Receiving_Domain, Receiving_Module.Module_ID)
      ;

   procedure Send_Log_Text
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      Level : in Log_Level_Type;
      Msg_Content : in Log_Message_Type;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   with
      Global => (In_Out => Mailboxes),
      Pre => Messaging_Ready
         and then (0 < Msg_Content'Length and Msg_Content'Length <= XDR_Size_Type'Last - 12)
         and then Receiving_Module.Module_ID = This_Module
         and then Receives(Receiving_Module, Log_Text_Msg)
         and then Has_Module(This_Domain, Receiving_Module.Module_ID)
      ;

   function Is_Log_Text(Message : Message_Record) return Boolean is
      (CubedOS.Message_Types.Message_Type(Message) = Log_Text_Msg);
   procedure Log_Text_Decode
      (Message : in Message_Record;
      Level : out Log_Level_Type;
      Msg_Content : out Log_Message_Type_Ptr;
      Decode_Status : out Message_Status_Type)
   with
      Global => null,
      Pre => Is_Log_Text(Message) and Payload(Message) /= null;



end CubedOS.Log_Server.API;
